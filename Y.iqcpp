{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor UPDOWNMotorA = motor(PORT3, true);\nmotor UPDOWNMotorB = motor(PORT9, false);\nmotor_group UPDOWN = motor_group(UPDOWNMotorA, UPDOWNMotorB);\n\ncontroller Controller = controller();\nmotor armMotorA = motor(PORT1, false);\nmotor armMotorB = motor(PORT7, true);\nmotor_group arm = motor_group(armMotorA, armMotorB);\n\npneumatic Pneumatic10 = pneumatic(PORT10);\nmotor leftM = motor(PORT2, true);\nmotor rightM = motor(PORT8, false);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\nint chasiss();int cha,chc;\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  vex::task ctchas(chasiss);\n  // Begin project code\n  arm.setStopping(hold);\n  leftM.setStopping(brake);\n  rightM.setStopping(brake);\n  while(1)\n  {\n    wait(5,msec);\n    if(Controller.ButtonRUp.pressing())\n    {\n      UPDOWN.spin(forward,100,pct);\n      UPDOWN.setStopping(hold);\n    }\n    else if (Controller.ButtonRDown.pressing())\n    {\n      UPDOWN.spin(forward,-50,pct);\n      UPDOWN.setStopping(brake);\n    }\n    else \n    {\n      UPDOWN.stop();\n    }\n    if (Controller.ButtonLDown.pressing())\n    {\n      arm.spin(forward,100,pct);\n    }\n    else if(Controller.ButtonLUp.pressing())\n    {\n      arm.spin(forward,-100,pct);\n    }\n    else \n    {\n      arm.stop();\n    }\n    if (Controller.ButtonEUp.pressing())\n    {\n      Pneumatic10.extend(cylinder1);\n    }\n    if (Controller.ButtonEDown.pressing())\n    {\n      Pneumatic10.retract(cylinder1);\n    }\n    if (Controller.ButtonFUp.pressing())\n    {\n      Pneumatic10.extend(cylinder2);\n    }\n    if (Controller.ButtonFDown.pressing())\n    {\n      Pneumatic10.retract(cylinder2);\n    }\n  }\n}\nint chasiss()\n{\n  while(1)\n  {\n    if (fabs(Controller.AxisA.position())>10)\n    {\n      cha=Controller.AxisA.position();\n    }\n    else \n    {\n      cha=0;\n    }\n    if (fabs(Controller.AxisC.position())>10)\n    {\n      chc=Controller.AxisC.position();\n    }\n    else \n    {\n      chc=0;\n    }\n    leftM.spin(forward,cha+0.7*chc,pct);\n    rightM.spin(forward,cha-0.7*chc,pct);\n  }\n}","textLanguage":"cpp","robotConfig":[{"port":[3,9],"name":"UPDOWN","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"向前","rev":"反","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[1,7],"name":"arm","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"向前","rev":"反","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[10],"name":"Pneumatic10","customName":false,"deviceType":"Pneumatic","deviceClass":"pneumatic","setting":{"cylinder1":"气缸1","cylinder2":"气缸2","cylinder1_reversed":"false","cylinder2_reversed":"false","cylinder3":"","cylinder4":""},"triportSourcePort":22},{"port":[2],"name":"leftM","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"向前","rev":"反"},"triportSourcePort":22},{"port":[8],"name":"rightM","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"向前","rev":"反"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.60.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":""}}